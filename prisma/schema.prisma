generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         Int         @id @default(autoincrement())
  name       String
  password   String
  totalBuys  Int
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  orders     Orders[]
  comments   Comment[]
  ratings    Rating[]
  addressId  Int?        @unique
}


model Addresses {
  id         Int        @id @default(autoincrement())
  name       String
  address    String
  zipcode    String
  city       String
  country    String
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
}


model Orders {
  id         Int         @id @default(autoincrement())
  userId     Int
  stripeId   String
  name       String
  address    String
  zipcode    String
  city       String
  country    String
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  orderId    Int
  pastryId   Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  order      Orders    @relation(fields: [orderId], references: [id])
  pastry     Pastry    @relation(fields: [pastryId], references: [id])
}

model Pastry {
  id          Int         @id @default(autoincrement())
  title       String
  type        PastryType
  description String
  price       Int
  allergens   String[]
  imagePath   String
  reduction   Int
  sells       Int
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  orderItems  OrderItem[]
  comments    Comment[]
  ratings     Rating[]

  @@map(name: "pastry")
}

model Comment {
  id         Int       @id @default(autoincrement())
  pastryId   Int
  userId     Int
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  pastry     Pastry    @relation(fields: [pastryId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map(name: "comment")
}

model Rating {
  id         Int       @id @default(autoincrement())
  pastryId   Int
  userId     Int
  value      Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  pastry     Pastry    @relation(fields: [pastryId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map(name: "rating")
}

enum PastryType {
  tart
  cake
  entremets
  individual_cake
  biscuits
}

model Sells {
  id         Int       @id @default(autoincrement())
  totalSells Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@map(name: "sells")
}
